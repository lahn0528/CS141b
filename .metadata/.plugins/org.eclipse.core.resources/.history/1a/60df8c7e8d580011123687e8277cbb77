package edu.caltech.cs141b.hw2.gwt.collab.server;


import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.jdo.PersistenceManager;
import javax.jdo.Transaction;
import javax.jdo.Query;
import javax.servlet.http.HttpSession;

import edu.caltech.cs141b.hw2.gwt.collab.client.CollaboratorService;
import edu.caltech.cs141b.hw2.gwt.collab.shared.DocumentMessage;
import edu.caltech.cs141b.hw2.gwt.collab.shared.DocumentMetadata;
import edu.caltech.cs141b.hw2.gwt.collab.shared.LockExpired;
import edu.caltech.cs141b.hw2.gwt.collab.shared.LockUnavailable;
import edu.caltech.cs141b.hw2.gwt.collab.shared.LockedDocument;
import edu.caltech.cs141b.hw2.gwt.collab.shared.LoginResults;
import edu.caltech.cs141b.hw2.gwt.collab.shared.StatusMessage;
import edu.caltech.cs141b.hw2.gwt.collab.shared.UnlockedDocument;
import edu.caltech.cs141b.hw2.gwt.collab.shared.UserValue;
import edu.caltech.cs141b.hw2.gwt.collab.server.PMF;

import com.google.appengine.api.datastore.KeyFactory;


import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class CollaboratorServiceImpl extends RemoteServiceServlet implements
		CollaboratorService {
	// Used for logging purposes
	private static final Logger log = Logger.getLogger(CollaboratorServiceImpl.class.toString());
	
	private static final String USER = "user";
	
	public LoginResults login(final String name) {

	    HttpSession session = getThreadLocalRequest().getSession();
	    User user = new User();
	    user.setName(name);
	    session.setAttribute(USER, user);

	    PersistenceManager pm = PMF.get().getPersistenceManager();
	    Transaction tx = pm.currentTransaction();

	    try {
	      tx.begin();
	      pm.makePersistent(user);
	      tx.commit();
	    } 
	    finally {
	      if (tx.isActive()) {
	        tx.rollback();
	      }
	    }
	    
	    String channelId = PushServer.createChannel(user);
	    return new LoginResults(user.getKey(), channelId);
	}
	
	/**
	 * Used to get a list of the currently available documents.
	 * 
	 * @param None
	 * @return docsList : List of the metadata of the currently available documents
	 */
	public List<DocumentMetadata> getDocumentList() {
		// Instantiate JDO-aware application components
		PersistenceManager pm = PMF.get().getPersistenceManager();
		Transaction tx = pm.currentTransaction();
		Query query = pm.newQuery(Document.class);
		
		// Store list of the metadata of the current documents
		List<DocumentMetadata> docsList = new ArrayList<DocumentMetadata>();
		try {
			// Start transaction
			tx.begin();
			log.fine("Getting a list of currently available documents");
			
			// Get documents from query
			List<Document> results = ((List<Document>) query.execute());
			if (!results.isEmpty()) {
				// Add metadata of each document to docsList
				for (Document d: results) {
					//pm.deletePersistent(d);
				    docsList.add(d.getDocumentMetdataObject());
				    System.out.println("getLockedBy: " + d.getLockedBy());
				}
			}
			tx.commit();
		} finally {
			query.closeAll();
		}
		return docsList;
	}

	/**
	 * Used to lock an existing document for editing.
	 * 
	 * @param documentKey : the key of the document to lock
	 * @return lockedDoc : LockedDocument object containing the current document state
	 * @throws LockUnavailable if a lock cannot be obtained
	 */
    public LockedDocument lockDocument(String documentKey)
            throws LockUnavailable {
    	// Instantiate JDO-aware application components
        PersistenceManager pm = PMF.get().getPersistenceManager();
        Transaction tx = pm.currentTransaction();
        
        LockedDocument lockedDoc = null;
        try {
        	// Start transaction
            tx.begin();   
            
            // Get document from datastore with given key
            Document document = pm.getObjectById(Document.class, KeyFactory.stringToKey(documentKey));
            log.fine("Attemping to lock " + document.getTitle() + ".");
            
            // Mark current date
            Date now = new Date();
            
            // Get user
            HttpSession session = getThreadLocalRequest().getSession();
            User current = (User) session.getAttribute(USER);
            UserValue user = current.toValue();
            
            // Allow access only if client has document token or if expiration date has passed
            // for previous owner. Otherwise, throw exception
            if (document.getLockedBy().equals(user) || document.getLockedUntil().before(now)) {
            	// Lock document. Use client's IP address to determine document ownership
                lockedDoc = document.lock(getThreadLocalRequest().getRemoteAddr());
            } else {
            	log.fine("Lock for " + document.getTitle() + 
            			" is unavailable. Locked until: " + document.getLockedUntil().toString());
            	throw new LockUnavailable("Lock for " + document.getTitle() + 
            			" is unavailable. The lock will be released at or before " +
            			document.getLockedUntil().toString());
            }
            
            tx.commit();
        } finally {
            if (tx.isActive()) {
                tx.rollback();
            }
        } 
        return lockedDoc;
    }

    /**
	 * Used to retrieve a document in read-only mode.
	 * 
	 * @param documentKey : the key of the document to read
	 * @return unlockedDoc : UnlockedDocument object which contains the entire document
	 */
    public UnlockedDocument getDocument(String documentKey) {
    	// Instantiate JDO-aware application components
        PersistenceManager pm = PMF.get().getPersistenceManager();
        Transaction tx = pm.currentTransaction();
        
        UnlockedDocument unlockedDoc = null;
        try {
        	// Start transaction
            tx.begin();
            
            // Get document with given key and create UnlockedDocument object to return
            Document document = pm.getObjectById(Document.class, KeyFactory.stringToKey(documentKey));
            unlockedDoc = document.getUnlockedDocumentVersion();
            
            log.fine("Obtaining document: " + document.getTitle() + " for read-only purpose.");
            tx.commit();
        } finally {
            if (tx.isActive()) {
                tx.rollback();
            }
        }
        return unlockedDoc;
    }

    /**
	 * Used to save a currently locked document.
	 * 
	 * @param  doc : LockedDocument object returned by lockDocument()
	 * @return unlockedDoc : the read-only version of the saved document
	 * @throws LockExpired if the locking primitives in the supplied
	 *         LockedDocument object cannot be used to modify the document
	 */
	public UnlockedDocument saveDocument(LockedDocument doc)
			throws LockExpired {
		// Instantiate JDO-aware application components
		PersistenceManager pm = PMF.get().getPersistenceManager();
        Transaction tx = pm.currentTransaction();
        
        UnlockedDocument unlockedDoc;
        Document document;
        try {
        	// Start transaction
            tx.begin();
            
            // If there is no key, assume new document. Otherwise, try to save document
            if (doc.getKey() == null) {
                log.info("Adding document " + doc.getTitle() + " to persistence manager.");
                
            	// Create new document and store object in datastore
            	document = new Document(doc.getTitle(), doc.getContents(),
            		doc.getLockedBy(), doc.getLockedUntil());
            	pm.makePersistent(document);
            } else {
            	log.fine("Updating document " + doc.getTitle() + " in persistence manager.");
            	
            	// Mark current date
            	Date now = new Date();
            	
            	// Get document from datastore with given key
            	document = pm.getObjectById(Document.class, KeyFactory.stringToKey(doc.getKey()));
            	
            	// If time has not expired, update document contents. Otherwise, throw exception
            	if (now.before(doc.getLockedUntil())) {
            		document.setTitle(doc.getTitle());
            		document.setContents(doc.getContents());
            	} else {
            		throw new LockExpired("Document " + doc.getTitle() + " lock expired");
            	}
            }
            // Create read-only version and unlock document
            unlockedDoc = document.getUnlockedDocumentVersion();
            document.unlock();
            
            // Remove current user request from queue
            document.remove();
            
            // Inform next user of document and update document's new owner
            if (document.getNextUser() != null) {
            	UserValue user = document.getNextUser();
            	document.setLockedBy(user);
            	StatusMessage message = new StatusMessage(user, "Requested document is now available.");
        		PushServer.sendMessage(user, message);
            }
            
            tx.commit();
        } finally {
            if (tx.isActive()) {
                tx.rollback();
            }
        }
		return unlockedDoc;
	}
	
	/**
	 * Used to release a lock that is no longer needed without saving.
	 * 
	 * @param  doc : the LockedDocument object returned by lockDocument(); any
	 *         modifications made to the document properties in this case are
	 *         ignored
	 * @return None
	 * @throws LockExpired if the locking primitives in the supplied
	 *         LockedDocument object cannot be used to release the lock
	 */
	public void releaseLock(LockedDocument doc) throws LockExpired {
		// Instantiate JDO-aware application components
		PersistenceManager pm = PMF.get().getPersistenceManager();
		Transaction tx = pm.currentTransaction();
		
		Document document;
		try {
			// Start transaction
			tx.begin();
			log.fine("Releasing " + doc.getTitle() + "'s lock.");
			
			// Mark current date
			Date currentDate = new Date();
			
			// If document already expired, throw exception. Otherwise, unlock document
			if (doc.getLockedUntil().before(currentDate)) {
				throw new LockExpired("Lock expired before attempting to release " +
						"document: " + doc.getTitle());
			} else {
				// Get document from datastore with given key
				document = pm.getObjectById(Document.class, KeyFactory.stringToKey(doc.getKey()));
				document.unlock();
			}
			tx.commit();
		} finally {
			if (tx.isActive()) {
				tx.rollback();
			}
		}
	}

	public void request(String documentKey) {
		// Instantiate JDO-aware application components
		PersistenceManager pm = PMF.get().getPersistenceManager();
		Transaction tx = pm.currentTransaction();
		
		try {
        	// Start transaction
            tx.begin();
            
            // Get document with given key
            Document document = pm.getObjectById(Document.class, documentKey);
            
            log.fine("Requesting document token for: " + document.getTitle());
            
            HttpSession session = getThreadLocalRequest().getSession();
            
            // Check if user is already in queue. If not, add request to document's queue. Else, send status message
            User current = (User) session.getAttribute(USER);
            UserValue user = current.toValue();
            if (!(document.containsUser(user))) {
	        	document.addUser(user);
	
	        	// If current user is next in line, send message, and update document's owner
	        	if (document.getNextUser().equals(user)) {
	        		DocumentMessage message = new DocumentMessage(user, documentKey);
	        		PushServer.sendMessage(user, message);
	        		document.setLockedBy(user);
	            }
            } else {
            	StatusMessage message = new StatusMessage(user, "Already requested token, please wait");
        		PushServer.sendMessage(user, message);
            }
            tx.commit();
        } finally {
            if (tx.isActive()) {
                tx.rollback();
            }
        }		
	}

	public void cancelRequest(String documentKey) {
		// Instantiate JDO-aware application components
		PersistenceManager pm = PMF.get().getPersistenceManager();
		Transaction tx = pm.currentTransaction();
		
		try {
        	// Start transaction
            tx.begin();
            
            // Get document with given key
            Document document = pm.getObjectById(Document.class, documentKey);
            
            log.fine("Canceling request for: " + document.getTitle());
            
            HttpSession session = getThreadLocalRequest().getSession();
            User current = (User) session.getAttribute(USER);
            UserValue user = current.toValue();
            // Remove request from document's queue
            if ((document.containsUser(user))) {
	        	document.removeUser(user);
	
	        	StatusMessage message = new StatusMessage(user, "Successfully removed from queue");
	        	PushServer.sendMessage(user, message);
            } else {
            	StatusMessage message = new StatusMessage(user, "Did not request any document.");
        		PushServer.sendMessage(user, message);
            }
            tx.commit();
        } finally {
            if (tx.isActive()) {
                tx.rollback();
            }
        }	
	}
}