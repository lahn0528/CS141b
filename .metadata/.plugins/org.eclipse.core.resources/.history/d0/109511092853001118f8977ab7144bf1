package edu.caltech.cs141b.hw2.gwt.collab.client;

import java.util.ArrayList;

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.event.dom.client.ChangeEvent;
import com.google.gwt.event.dom.client.ChangeHandler;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.logical.shared.ResizeEvent;
import com.google.gwt.event.logical.shared.ResizeHandler;
import com.google.gwt.event.logical.shared.SelectionEvent;
import com.google.gwt.event.logical.shared.SelectionHandler;
import com.google.gwt.user.client.DOM;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.DecoratorPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.RichTextArea;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TabLayoutPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.google.gwt.user.client.ui.Widget;

import edu.caltech.cs141b.hw2.gwt.collab.shared.LockedDocument;
import edu.caltech.cs141b.hw2.gwt.collab.shared.UnlockedDocument;
import com.google.gwt.user.client.ui.TabPanel;
import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.user.client.ui.ScrollPanel;

/**
 * Main class for a single Collaborator widget.
 */
public class Collaborator extends Composite implements ClickHandler, ChangeHandler {
	
	Resources resources = GWT.create(Resources.class);
	protected CollaboratorServiceAsync collabService;
	
	// Track document information.
	protected UnlockedDocument readOnlyDoc = null;
	protected LockedDocument lockedDoc = null;
	
	// This array list stores tab contents for each tab in the tab panel.
	protected ArrayList<TabContent> tabDocuments = new ArrayList<TabContent>();
	
	// Managing available documents.
	protected ListBox documentList = new ListBox();
	private Button refreshList = new Button("Refresh  List");
	protected Button createNew = new Button("New Document");
	
	// For displaying document information and editing document content.
	protected TextBox title = new TextBox();
	protected RichTextArea contents = new RichTextArea();
	protected Button refreshDoc = new Button("Refresh");
	protected Button lockButton = new Button("Get Lock");
	protected Button saveButton = new Button("Save");
	//protected TabPanel tabPanel = new TabPanel();
	protected TabLayoutPanel tabPanel = new TabLayoutPanel(3.5, Unit.EM);
	
	
	// Callback objects.
	protected DocLister lister = new DocLister(this);
	protected DocReader reader = new DocReader(this);
	private DocLocker locker = new DocLocker(this);
	protected DocReleaser releaser = new DocReleaser(this);
	private DocSaver saver = new DocSaver(this);
	protected String waitingKey = null;
	
	// Status tracking.
	private VerticalPanel statusArea = new VerticalPanel();
	private VerticalPanel vp_1;
	private HorizontalPanel hp_1;
	private VerticalPanel outerVp_1;
	private final VerticalPanel verticalPanel = new VerticalPanel();
	private final ScrollPanel scrollPanel = new ScrollPanel();
	private final VerticalPanel verticalPanel_1 = new VerticalPanel();
	
	private final HorizontalPanel outerHp;
	
	/**
	 * UI initialization.
	 * 
	 * @param collabService
	 */
	public Collaborator(CollaboratorServiceAsync collabService) {
		this.collabService = collabService;
		outerHp = new HorizontalPanel();
		outerHp.setStyleName("outer-box");
		outerHp.setSize("100%", "100%");
		/*
		outerHp.setWidth(Window.getClientWidth() + "px");
		outerHp.setHeight("100%");
	    Window.addResizeHandler(new ResizeHandler() {

			@Override
			public void onResize(ResizeEvent event) {
	    		int width = event.getWidth();
	    		outerHp.setWidth(width + "px");
			}
	    });
		*/
		outerVp_1 = new VerticalPanel();
		outerVp_1.setSpacing(20);
		outerVp_1.setStyleName("outerVp_1");
		
		VerticalPanel vp = new VerticalPanel();
		vp.setStyleName("vp2");
		outerVp_1.add(vp);
		vp.setSpacing(10);
		HTML html = new HTML("<h2>Available Documents</h2>");
		vp.add(html);
		html.setHeight("35px");
		HorizontalPanel hp = new HorizontalPanel();
		hp.setSpacing(10);
		hp.add(refreshList);
		hp.add(createNew);
		vp.add(hp);
		hp.setWidth("267px");
		
		refreshList.addClickHandler(this);
		createNew.addClickHandler(this);
		documentList.setSize("500px", "225px");
		vp.add(documentList);
		vp.setSize("510px", "300px");
		
		documentList.addChangeHandler(this);
		documentList.setVisibleItemCount(10);
		
		outerHp.add(outerVp_1);
		outerVp_1.setSize("426px", "362px");
		verticalPanel_1.setStyleName("vp2");
		verticalPanel_1.setSpacing(10);
		outerVp_1.add(verticalPanel_1);
		verticalPanel_1.setWidth("453px");
		HTML html_2 = new HTML("<h2>Console</h2>");
		verticalPanel_1.add(html_2);
		scrollPanel.setStyleName("insideConsole");
		verticalPanel_1.add(scrollPanel);
		scrollPanel.setSize("500px", "246px");
		scrollPanel.setWidget(statusArea);
		statusArea.setSize("510px", "61px");
		statusArea.setSpacing(10);
		verticalPanel.setStyleName("document");
		verticalPanel.setSpacing(10);
		HTML html_1 = new HTML("<h2>Selected Documents</h2>");
		html_1.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
		verticalPanel.add(html_1);

		outerHp.add(verticalPanel);
		verticalPanel.setSize("326px", "185.60000000000002px");
		hp_1 = new HorizontalPanel();
		hp_1.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
		verticalPanel.add(hp_1);
		hp_1.setWidth("253px");
		hp_1.setSpacing(10);
		hp_1.add(refreshDoc);
		hp_1.add(lockButton);
		hp_1.add(saveButton);
		
		verticalPanel.add(tabPanel);
		tabPanel.setSize("918px", "537px");
		//tabPanel.setSize(Window.getClientWidth()*0.1 + "px", Window.getClientWidth()*0.1 +"px");
		
		
		VerticalPanel welcomePage = new VerticalPanel();
		HTML welHtml = new HTML("<h2>Welcome to Boba</h2>");
		welcomePage.add(welHtml);
		tabPanel.add(welcomePage, "Welcome");
		tabPanel.selectTab(0);
		
		tabPanel.addSelectionHandler(new SelectionHandler<Integer>() 
		        {
					@Override
					public void onSelection(SelectionEvent<Integer> event) {
						
						int tabId = event.getSelectedItem();
						if (tabId == 0) {
							refreshDoc.setEnabled(false);
							lockButton.setEnabled(false);
							saveButton.setEnabled(false);
						} else {
							
							TabContent current = tabDocuments.get(tabId - 1);
							
							// Use these variables as place holders to store current 
							// tab contents. Get current tab contents when a tab is
							// selected.
							readOnlyDoc = current.getReadOnlyDoc();
							lockedDoc = current.getLockedDoc();
							title = current.getTitle();
							contents = current.getContents();
							refreshDoc.setEnabled(current.getRefreshDoc());
							lockButton.setEnabled(current.getLockButton());
							saveButton.setEnabled(current.getSaveButton());
							
							// If document is still under editing for the first time,
							// enable content and title box for editing.
							if (current.getKey() == null) {
								title.setEnabled(true);
								contents.setEnabled(true);
							}
						}
						
						
					}
		        });
		refreshDoc.addClickHandler(this);
		lockButton.addClickHandler(this);
		saveButton.addClickHandler(this);
		
		setDefaultButtons();
		initWidget(outerHp);
		
		lister.getDocumentList();
	}
	
	/*
	 * An helper function to figure out the index of the document based 
	 * on document key in the tabPanel.
	 */
	protected int findDocumentIndex(String myKey) {
		int docIndex;
		for (docIndex = 0; docIndex < tabDocuments.size(); docIndex++) {
			String key = tabDocuments.get(docIndex).getKey();
			
			if (key != null && key.equals(myKey)) {
				// If keys are equal, return result
				return docIndex;
			} else if (key == null && myKey == null) {
				// If they are both null
				return docIndex;
			}
		}
		return docIndex;
	}
	
	/*
	 * An helper function to open an existing or new tab.
	 */
	protected int setTabWidget(String myKey, String myTitle) {
		
		// Iterate through tabDocuments to find the tabContents object
		// that stores all the information about this document.
		int docIndex = findDocumentIndex(myKey);
		
		// Get the tab
		TabContent tab = null;
		// If it's not open
		if (docIndex == tabDocuments.size()) {
			// Create a new tab
			final Label label = new Label(myTitle);
			tab = new TabContent(null, null, label);
			tabDocuments.add(tab);
			
			// Update tabPanel
			tabPanel.add(tab.getVp(), getTabWidget(tabDocuments.get(tabDocuments.size()-1).getTitleLabel()));
			
		} else {
			// Otherwise, get the old tab information.
			tab = tabDocuments.get(docIndex);
		}
		
		// Store the attribute of readOnlyDoc and lockedDoc.
		if (readOnlyDoc == null) {
			tab.setReadOnlyDoc(null);
		} else {
			tab.setReadOnlyDoc(readOnlyDoc.getCopy());
		}
		if (lockedDoc == null) {
			tab.setLockedDoc(null);
		} else {
			tab.setLockedDoc(lockedDoc.getCopy());
		}

		// Make title and contents widget available for edit and display.
		title = tab.getTitle();
		contents = tab.getContents();
		
		// Set the key attribute
		tab.setKey(myKey);
		return docIndex;
	}
	
	// Get the tab widget (the tab title and the close button)
	private Widget getTabWidget(Label label) {

		// Create a horizontal panel to embed the close button and title
	    final HorizontalPanel hPanel = new HorizontalPanel();
	    DOM.setStyleAttribute(label.getElement(), "whiteSpace", "nowrap");
	    
	    // Create the close button, and set up the click handler to be able to close the tab.
	    ImageAnchor closeBtn = new ImageAnchor();
	    closeBtn.setResource(resources.close());
	    closeBtn.addClickHandler(new ClickHandler() {
	        public void onClick(ClickEvent event) {
	            Boolean error = true;
	            String key = null;
	            // Obtain the key for the current document
	            if (readOnlyDoc != null) {
	                key = readOnlyDoc.getKey();
	                error = false;
	            } else if (lockedDoc != null) {
	                key = lockedDoc.getKey();
	                error = false;
	            }
	            
	            // If no error and have at least one tab to close
	            if (!error && tabDocuments.size() > 0) {
	            	// Remove the tab from tab panel, and remove the document from current open document list.
	                int docIndex = findDocumentIndex(key);
	                tabPanel.remove(tabDocuments.get(docIndex).getVp());
	                tabDocuments.remove(docIndex);
	                
	                // show most right side tab
	                // Remember the first page is always welcome
	                tabPanel.selectTab(tabDocuments.size());
	                // If closing off a unsaved new document, enable to create another new one.
	                if (key == null) {
	                    createNew.setEnabled(true);
	                }
	            }
	        }
	    });
	    
	    // Set the tab's title.
	    hPanel.add(label);
	    hPanel.add(new HTML("&nbsp&nbsp&nbsp"));
	    hPanel.add(closeBtn);
	    hPanel.setStyleName("gwt-TabLayoutPanelTab");
	    return hPanel;
	}
	
	/**
	 * Resets the state of the buttons and edit objects to their default.
	 * 
	 * The state of these objects is modified by requesting or obtaining locks
	 * and trying to or successfully saving.
	 */
	protected void setDefaultButtons() {
		refreshDoc.setEnabled(true);
		lockButton.setEnabled(true);
		saveButton.setEnabled(false);
		title.setEnabled(false);
		contents.setEnabled(false);
	}
	
	/**
	 * Behaves similarly to locking a document, except without a key/lock obj.
	 */
	private void createNewDocument() {
		discardExisting(null);
		lockedDoc = new LockedDocument(null, null, null,
				"Enter the document title.",
				"Enter the document contents.");
		locker.gotDoc(lockedDoc);
		History.newItem("new");
		createNew.setEnabled(false);
	}
	
	/**
	 * Returns the currently active token.
	 * 
	 * @return history token which describes the current state
	 */
	protected String getToken() {
		if (lockedDoc != null) {
			if (lockedDoc.getKey() == null) {
				return "new";
			}
			return lockedDoc.getKey();
		} else if (readOnlyDoc != null) {
			return readOnlyDoc.getKey();
		} else {
			return "list";
		}
	}
	
	/**
	 * Modifies the current state to reflect the supplied token.
	 * 
	 * @param args history token received
	 */
	protected void receiveArgs(String args) {
		if (args.equals("list")) {
			
		} else if (args.equals("new")) {
			createNewDocument();
		} else {
			reader.getDocument(args);
		}
	}
	
	/**
	 * Adds status lines to the console window to enable transparency of the
	 * underlying processes.
	 * 
	 * @param status the status to add to the console window
	 */
	protected void statusUpdate(String status) {
		while (statusArea.getWidgetCount() > 22) {
			statusArea.remove(1);
		}
		final HTML statusUpd = new HTML(status);
		statusArea.add(statusUpd);
	}

	/* (non-Javadoc)
	 * Receives button events.
	 * @see com.google.gwt.event.dom.client.ClickHandler#onClick(com.google.gwt.event.dom.client.ClickEvent)
	 */
	@Override
	public void onClick(ClickEvent event) {
		if (event.getSource().equals(refreshList)) {
			History.newItem("list");
			lister.getDocumentList();
		} else if (event.getSource().equals(createNew)) {
			createNewDocument();
		} else if (event.getSource().equals(refreshDoc)) {
			if (readOnlyDoc != null) {
				reader.getDocument(readOnlyDoc.getKey());
			}
		} else if (event.getSource().equals(lockButton)) {
			System.out.println("Trying to lock");
			if (readOnlyDoc != null) {
				System.out.println("Closer to lock");
				locker.lockDocument(readOnlyDoc.getKey());
			}
		} else if (event.getSource().equals(saveButton)) {
			System.out.println("Saving step 1");
			if (lockedDoc != null) {
				System.out.println("Saving step 2");
				if (lockedDoc.getTitle().equals(title.getValue()) &&
						lockedDoc.getContents().equals(contents.getHTML())) {
					statusUpdate("No document changes; not saving.");
				}
				else {
					lockedDoc.setTitle(title.getValue());
					lockedDoc.setContents(contents.getHTML());
					saver.saveDocument(lockedDoc);
				}
			}
		}
	}

	/* (non-Javadoc)
	 * Intercepts events from the list box.
	 * @see com.google.gwt.event.dom.client.ChangeHandler#onChange(com.google.gwt.event.dom.client.ChangeEvent)
	 */
	@Override
	public void onChange(ChangeEvent event) {
		if (event.getSource().equals(documentList)) {
			String key = documentList.getValue(documentList.getSelectedIndex());
			discardExisting(key);
			reader.getDocument(key);
		}
	}
	
	/**
	 * Used to release existing locks when the active document changes.
	 * 
	 * @param key the key of the new active document or null for a new document
	 */
	private void discardExisting(String key) {
		if (lockedDoc != null) {
			if (lockedDoc.getKey() == null) {
				statusUpdate("Discarding new document.");
			}
			else if (!lockedDoc.getKey().equals(key)) {
				releaser.releaseLock(lockedDoc);
			}
			else {
				// Newly active item is the currently locked item.
				return;
			}
			lockedDoc = null;
			setDefaultButtons();
		} else if (readOnlyDoc != null) {
			if (readOnlyDoc.getKey().equals(key)) return;
			readOnlyDoc = null;
		}
	}
}
