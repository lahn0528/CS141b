package edu.caltech.cs141b.hw2.gwt.collab.server;

import com.google.appengine.api.channel.ChannelMessage;
import com.google.appengine.api.channel.ChannelService;
import com.google.appengine.api.channel.ChannelServiceFactory;
import edu.caltech.cs141b.hw2.gwt.collab.shared.Message;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Wraps the ChannelService up in our application-specific
 * push-messaging infrastructure.
 *
 * @author Toby Reyelts
 */
public class PushServer {

  private static final Logger logger = Logger.getLogger(PushServer.class.getName());
  private static final String APP_KEY_PREFIX = "document-share-";

  /**
   * Sends a message to all specified users
   * 
   * @param userKeys : list of users to send the message to.
   * 	    msg : message to be sent.
   */
  private static void sendMessageByKey(List<String> userKeys, Message msg) {
	  String encodedMessage = encodeMessage(msg);
	  for (String user : userKeys) {
		  String key = user;
		  try {
			  System.out.println("Sending to user: " +key);
			  ChannelService channelService = ChannelServiceFactory.getChannelService();
			  channelService.sendMessage(new ChannelMessage(key, encodedMessage));
		  } catch (Exception e) {
			  logger.log(Level.SEVERE, "Failed to push the message " + msg + " to client " + key, e);
		  }
	  }
  	}
  
  /**
   * Change message to String type
   * 
   * @param msg : Message to be converted
   * @return String containing message
   */
  private static String encodeMessage(Message msg) {
	  return msg.toString();
  }

  /**
   * Sends a message to one specific user
   * .
   * @param user : user to send the message to.
   *        msg : message to be sent.
   */
  public static void sendMessage(String user, Message msg) {
	  sendMessageByKey(Arrays.asList(user), msg);
  }

  /**
   * Create a channel for a user. Returns the channel id that
   * the client must use to connect to receive push messages.
   *
   * @param user : user to create the channel for
   * @return String containing the user's channel id
   */
  public static String createChannel(User user) {
	  String channelId = getChannelService().createChannel(user.getKey());
	  logger.info("Returning new channel " + channelId + " for user " + user);
	  return channelId;
  }
  
  private static ChannelService getChannelService() {
	    // NB: This is really cheap, but if it became expensive, we could stuff
	    // it in a thread local.
	    return ChannelServiceFactory.getChannelService();
  }
  
}
